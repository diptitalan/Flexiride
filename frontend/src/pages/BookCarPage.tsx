import { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import axios from "axios";
import CarCartCard from "../components/car-booking-compenents/CarCartCard";
import FailureToast from "../components/toast-components/FailureToast";

import { RootState } from "../store";
import { setFilter } from "../store/slices/filterSlice";
import { SelectedCarType } from "../types/SelectedCarType";

interface SelectedCarInfo {
  selectedCarId: string | number;
  carName: string;
  carLocation: string;
  carImage: string;
  carPrice: number;
  carDeposit: number;
}

const now = new Date();
const formattedDate = `${now.getFullYear()}-${String(
  now.getMonth() + 1
).padStart(2, "0")}-${String(now.getDate()).padStart(2, "0")}T${String(
  now.getHours()
).padStart(2, "0")}:${String(now.getMinutes()).padStart(2, "0")}`;

const BookCarPage = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const userInfo = useSelector((state: RootState) => state.user.userInfo);
  const appliedFilterInfo = useSelector(
    (state: RootState) => state.appliedFilterInfo.filterInfo
  );
  const serviceLocationIdInfo = useSelector(
    (state: RootState) => state.serviceLocation.idToName
  );
  const serviceLocationNameInfo = useSelector(
    (state: RootState) => state.serviceLocation.nameToId
  );
  const selectedCarId = useSelector(
    (state: RootState) => state.selectedCar.carInfo?.selectedCarId
  );

  const [isUnavailable, setIsUnavailable] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");

  const [pickupLocation, setPickupLocation] = useState(
    serviceLocationIdInfo[appliedFilterInfo.pickupLocation]
  );
  const [dropoffLocation, setDropoffLocation] = useState(
    serviceLocationIdInfo[appliedFilterInfo.dropoffLocation]
  );
  const [pickupDateTime, setPickupDateTime] = useState(
    appliedFilterInfo.pickupDateTime || formattedDate
  );
  const [dropoffDateTime, setDropoffDateTime] = useState(
    appliedFilterInfo.dropoffDateTime || formattedDate
  );

  const [selectedCarInfo, setSelectedCarInfo] = useState<SelectedCarInfo>({
    selectedCarId: selectedCarId || "",
    carName: "Audi A6 Quattro 2023",
    carLocation: "Ukraine, Kyiv",
    carImage: "",
    carPrice: 900,
    carDeposit: 2000,
  });

  const [totalPrice, setTotalPrice] = useState(0);
  const [isEditingLocation, setIsEditingLocation] = useState(false);
  const [isEditingDates, setIsEditingDates] = useState(false);

  const user = {
    name: userInfo?.username || "John Doe",
    email: userInfo?.email || "example@gmail.com",
    phone: "+380 123 456 789",
  };

  const orderId = "32457 081124"; // Ideally generated by backend

  const handleConfirm = async () => {
    if (
      !selectedCarId ||
      !pickupDateTime ||
      !dropoffDateTime ||
      !pickupLocation ||
      !dropoffLocation
    ) {
      setErrorMessage("Missing required booking details.");
      return;
    }

    if (pickupDateTime >= dropoffDateTime) {
      setErrorMessage("Pickup date cannot be later than drop-off date.");
      return;
    }

    try {
      const token = userInfo?.idToken;
      const requestBody = {
        carId: selectedCarInfo.selectedCarId,
        clientId: userInfo?.userId,
        pickupDateTime,
        dropOffDateTime: dropoffDateTime,
        pickupLocationId: serviceLocationNameInfo[pickupLocation],
        dropOffLocationId: serviceLocationNameInfo[dropoffLocation],
      };

      const response = await axios.post(
        "https://o8zynirqvc.execute-api.ap-northeast-3.amazonaws.com/dev/bookings",
        requestBody,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      setShowSuccess(true);
      setSuccessMessage("Booking successful!");
      setTimeout(() => navigate("/mybookings"), 3000);
    } catch (err: any) {
      if (err.response?.status === 409) {
        setIsUnavailable(true);
      } else {
        setErrorMessage("Booking failed. Please try again later.");
      }
    }
  };

  useEffect(() => {
    if (!selectedCarId) return;

    const fetchSelectedCarInfo = async () => {
      try {
        const url = `https://o8zynirqvc.execute-api.ap-northeast-3.amazonaws.com/dev/cars/${selectedCarId}`;
        const selectedCarResponse = await axios.get<{ data: SelectedCarType }>(
          url
        );
        const carData = selectedCarResponse.data.data;

        setSelectedCarInfo({
          selectedCarId: carData.carId,
          carName: carData.model,
          carLocation: carData.location,
          carImage: carData.images[0], // replace with carData.image if dynamic
          carPrice: Number(carData.pricePerDay),
          carDeposit: 2000,
        });
      } catch (err) {
        console.error("Error fetching car data:", err);
      }
    };

    fetchSelectedCarInfo();
  }, [selectedCarId]);

  useEffect(() => {
    if (!pickupDateTime || !dropoffDateTime || !selectedCarInfo.carPrice)
      return;

    const bookedDays =
      (new Date(dropoffDateTime).getTime() -
        new Date(pickupDateTime).getTime()) /
      (1000 * 3600 * 24);
    const bookedDaysCount = Math.max(1, Math.ceil(bookedDays));

    setTotalPrice(bookedDaysCount * selectedCarInfo.carPrice);
  }, [
    pickupLocation,
    dropoffLocation,
    pickupDateTime,
    dropoffDateTime,
    selectedCarInfo.carPrice,
  ]);

  return (
    <div
      className={`bg-[#FFFCF7] min-h-screen flex flex-col justify-between text-sm ${
        isUnavailable ? "opacity-60" : ""
      }`}
    >
      <main className="px-8 py-2 max-w-6xl w-full relative ml-[-10px] flex-grow">
        {/* Error Toast */}
        <FailureToast
          message={errorMessage}
          subMessage="Cannot make request."
          isOpen={Boolean(errorMessage)}
          onClose={() => setErrorMessage("")}
          autoClose={true}
          autoCloseTime={3000}
        />

        {/* Title */}
        <div className="text-gray-500 mb-2">Cars &gt; Car booking</div>
        <h1
          className="font-sans mb-6"
          style={{ fontFamily: "Inter, sans-serif", fontSize: "56px" }}
        >
          Car booking
        </h1>

        {/* Main Grid */}
        <div
          className="grid grid-cols-1 md:grid-cols-[380px_1fr] gap-6 items-start min-h-screen p-6"
          style={{ backgroundColor: "#FFFCF7" }}
        >
          {/* Left Column */}
          <div className="flex flex-col gap-6 w-full">
            {/* Personal Info */}
            <div>
              <h2 className="font-bold text-[24px] mb-2">Personal info</h2>
              <div className="border rounded-lg p-4 bg-transparent">
                <p className="font-bold text-[14px]">{user.name}</p>
                <p className="text-gray-500 text-[14px]">{user.email}</p>
                <p className="text-gray-500 text-[14px]">{user.phone}</p>
              </div>
            </div>

            {/* Location */}
            <div>
              <h2 className="font-bold text-[24px] mb-2">Location</h2>
              <div className="relative border rounded-lg p-4 bg-transparent">
                <button
                  className="absolute top-4 right-4 text-black-500 font-semibold text-sm"
                  type="button"
                  onClick={() => {
                    setIsEditingLocation(!isEditingLocation);
                    dispatch(
                      setFilter({
                        pickupLocation: serviceLocationNameInfo[pickupLocation],
                        dropoffLocation:
                          serviceLocationNameInfo[dropoffLocation],
                      })
                    );
                  }}
                >
                  {isEditingLocation ? "Save" : "Change"}
                </button>
                <div className="space-y-2">
                  {isEditingLocation ? (
                    <>
                      <label className="text-gray-500 block">
                        Pick-up location
                      </label>
                      <select
                        className="border p-2 rounded w-full text-[18px]"
                        value={pickupLocation}
                        onChange={(e) => setPickupLocation(e.target.value)}
                      >
                        {Object.keys(serviceLocationNameInfo)
                          .filter((name) => name !== dropoffLocation)
                          .map((name, idx) => (
                            <option key={idx} value={name}>
                              {name}
                            </option>
                          ))}
                      </select>

                      <label className="text-gray-500 block mt-2">
                        Drop-off location
                      </label>
                      <select
                        className="border p-2 rounded w-full text-[18px]"
                        value={dropoffLocation}
                        onChange={(e) => setDropoffLocation(e.target.value)}
                      >
                        {Object.keys(serviceLocationNameInfo)
                          .filter((name) => name !== pickupLocation)
                          .map((name, idx) => (
                            <option key={idx} value={name}>
                              {name}
                            </option>
                          ))}
                      </select>
                    </>
                  ) : (
                    <>
                      <p className="text-gray-500 text-sm">Pick-up location</p>
                      <p className="font-medium">{pickupLocation}</p>
                      <p className="text-gray-500 text-sm mt-2">
                        Drop-off location
                      </p>
                      <p className="font-medium">{dropoffLocation}</p>
                    </>
                  )}
                </div>
              </div>
            </div>

            {/* Dates & Time */}
            <div>
              <h2 className="font-bold text-[24px] mb-2">Dates & Time</h2>
              <div className="relative border rounded-lg p-4 bg-transparent">
                <button
                  className="absolute top-4 right-4 text-black-700 font-semibold text-sm"
                  onClick={() => {
                    setIsEditingDates(!isEditingDates);
                    dispatch(setFilter({ pickupDateTime, dropoffDateTime }));
                  }}
                >
                  {isEditingDates ? "Save" : "Change"}
                </button>
                <div className="space-y-2">
                  {isEditingDates ? (
                    <>
                      <label className="text-gray-500 block">
                        Pick-up date & time
                      </label>
                      <input
                        type="datetime-local"
                        className="border p-2 rounded w-full text-[18px]"
                        value={pickupDateTime}
                        onChange={(e) => setPickupDateTime(e.target.value)}
                      />
                      <label className="text-gray-500 block mt-2">
                        Drop-off date & time
                      </label>
                      <input
                        type="datetime-local"
                        className="border p-2 rounded w-full text-[18px]"
                        value={dropoffDateTime}
                        onChange={(e) => setDropoffDateTime(e.target.value)}
                      />
                    </>
                  ) : (
                    <>
                      <p className="text-gray-500 text-sm">
                        Pick-up date & Time
                      </p>
                      <p className="font-medium">
                        {pickupDateTime.split("T").join(" | ")}
                      </p>
                      <p className="text-gray-500 text-sm mt-2">
                        Drop-off date & Time
                      </p>
                      <p className="font-medium">
                        {dropoffDateTime.split("T").join(" | ")}
                      </p>
                    </>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Right Column - Car Summary */}
          <CarCartCard
            data={selectedCarInfo}
            totalPrice={totalPrice}
            handleConfirmFun={handleConfirm}
          />
        </div>
      </main>
    </div>
  );
};

export default BookCarPage;
